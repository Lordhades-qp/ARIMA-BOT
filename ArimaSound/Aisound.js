const fs = require('fs');
const path = require('path');
const axios = require('axios');

module.exports = {
    nomCom: ['sound', 'play', 'audio'], // Noms des commandes
    categorie: 'Audio',
    reaction: 'üéµ',
    description: 'Joue un son pr√©d√©fini ou g√©n√®re un son bas√© sur l\'intelligence artificielle.',
    execute: async (dest, sock, commandeOptions) => {
        const { args, repondre } = commandeOptions;

        // R√©pertoire des sons pr√©d√©finis
        const soundDir = path.join(__dirname, '../sounds');
        const availableSounds = fs.readdirSync(soundDir).filter(file => file.endsWith('.mp3'));

        if (!args.length) {
            const soundList = availableSounds.map((sound, index) => `${index + 1}. ${sound.replace('.mp3', '')}`).join('\n');
            return await repondre(`üéß Sons disponibles :\n\n${soundList}\n\nUtilisez \`!sound <nom>\` pour jouer un son.`);
        }

        const soundName = args.join(' ').toLowerCase();
        const matchedSound = availableSounds.find(sound => sound.toLowerCase().includes(soundName));

        if (matchedSound) {
            const soundPath = path.join(soundDir, matchedSound);
            return await sock.sendMessage(dest, { audio: { url: soundPath }, mimetype: 'audio/mp4' }, { quoted: commandeOptions.ms });
        }

        // G√©n√©ration dynamique avec IA
        const dynamicSound = await generateAISound(args.join(' '));
        if (dynamicSound) {
            return await sock.sendMessage(dest, { audio: { url: dynamicSound }, mimetype: 'audio/mp4' }, { quoted: commandeOptions.ms });
        }

        return await repondre('‚ùå Aucun son trouv√© ou g√©n√©r√© pour cette requ√™te.');
    }
};

// Fonction pour g√©n√©rer un son via une API d'intelligence artificielle
async function generateAISound(query) {
    try {
        const response = await axios.post('Bandlab/leventlab', { text: query }, { responseType: 'arraybuffer' });
        const filePath = path.join(__dirname, '../sounds/generated.mp3');

        // Sauvegarde du son g√©n√©r√©
        fs.writeFileSync(filePath, response.data);
        return filePath;
    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration du son :', error.message);
        return null;
    }
      }
